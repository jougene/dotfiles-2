set nocompatible
filetype off

let mapleader=","

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugin manager
Plugin 'gmarik/Vundle.vim'

" General
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/syntastic'

" Search and navigation
Plugin 'mileszs/ack.vim'
Plugin 'rking/ag.vim'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'jasoncodes/ctrlp-modified.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Shougo/neocomplete'

" Advanced
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ConradIrwin/vim-bracketed-paste'
Plugin 'majutsushi/tagbar'
Plugin 'jgdavey/tslime.vim'
Plugin 'mbbill/undotree'
Plugin 'Valloric/MatchTagAlways'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'Shougo/vimproc.vim'
Plugin 'kana/vim-textobj-user'

" Tools integration
Plugin 'hashivim/vim-vagrant'
Plugin 'Floobits/floobits-vim'

" Languages support
Plugin 'chase/vim-ansible-yaml'
Plugin 'kchmck/vim-coffee-script'
Plugin 'othree/html5.vim'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-markdown'
Plugin 'slim-template/vim-slim'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'Glench/Vim-Jinja2-Syntax'

" Clojure
Plugin 'guns/vim-clojure-highlight'
Plugin 'guns/vim-clojure-static'
Plugin 'guns/vim-slamhound'
Plugin 'tpope/vim-classpath'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-salve'
Plugin 'venantius/vim-eastwood'
Plugin 'venantius/vim-cljfmt'
Plugin 'vim-scripts/paredit.vim'

" Erlang
Plugin 'vim-erlang/vim-erlang-runtime'
Plugin 'vim-erlang/vim-erlang-compiler'
Plugin 'vim-erlang/vim-erlang-omnicomplete'
Plugin 'vim-erlang/vim-erlang-tags'

" Haskell
Plugin 'neovimhaskell/haskell-vim'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'eagletmt/neco-ghc'
Plugin 'Twinside/vim-hoogle'
Plugin 'mpickering/hlint-refactor-vim'

" Ruby, Rails
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rails'
Plugin 'vim-ruby/vim-ruby'
Plugin 'sunaku/vim-ruby-minitest'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-rvm'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'p0deje/vim-ruby-interpolation'

" Tags support
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'

" Themes
Plugin 'nanotech/jellybeans.vim'
let g:jellybeans_use_term_background_color = 1

call vundle#end()

filetype plugin indent on

set lazyredraw
set cursorline
set hidden
set nowrap
set number
set hlsearch
set ignorecase
set smartcase
set tabstop=4
set shiftwidth=4
set expandtab

set splitbelow
set splitright
set diffopt+=vertical

set nobackup
set nowb
set noswapfile

set t_Co=256
colorscheme jellybeans

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files.
  " Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " bind \ (backward slash) to grep shortcut
  nnoremap \ :Ag<SPACE>
endif

let g:ctrlp_regexp = 1
" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" ==================== KeyMap ========================
nmap <F8> :TagbarToggle<CR>
nnoremap <F5> :UndotreeToggle<cr>
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

" RSpec.vim mappings
" map <Leader>t :call RunCurrentSpecFile()<CR> " conflict with buffergator
map <Leader>s :call RunNearestSpec()<CR>
" map <Leader>l :call RunLastSpec()<CR>        " conflict with lower word
map <Leader>a :call RunAllSpecs()<CR>

let g:rspec_command = 'call Send_to_Tmux("clear\n bundle exec rspec {spec}\n")'

set completefunc=syntaxcomplete#Complete

" Clojure
nmap <Leader>r :RunTests<CR>
autocmd User FireplacePreConnect call fireplace#register_port_file(expand('./nrepl-port'), '/')

" NERDTree
nmap <C-\> :NERDTreeFind<CR>
nmap <silent> <leader><leader> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$']

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

nmap <silent> // :nohlsearch<CR>
noremap ,h1 :set hlsearch! hlsearch?<CR>

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" ctrlp git modified
map <Leader>m :CtrlPModified<CR>
map <Leader>M :CtrlPBranch<CR>

let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_ruby_checkers = ['rubocop', 'mri']
let g:syntastic_haml_checkers = ['haml_lint', 'haml']
let g:syntastic_slim_checkers = ['slim_lint', 'slimrb']

let g:buffergator_viewport_split_policy = "B"
let g:buffergator_sort_regime = "mru"

let g:markdown_fenced_languages = ['clojure', 'ruby']

let g:easytags_async = 1

" Allows you to enter sudo pass and save the file
" when you forgot to open your file with sudo
cmap w!! %!sudo tee > /dev/null null%

" Allow to copy/paste between VIM instances
" copy the current visual selection to ~/.vbuf
vmap <Leader>y :w! ~/.vbuf<CR>
" copy the current line to the buffer file if no visual selection
nmap <Leader>y :.w! ~/.vbuf<CR>
" paste the contents of the buffer file
nmap <Leader>p :r ~/.vbuf<CR>

" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

au BufRead,BufNewFile {Capfile,Gemfile,Guardfile,Vagrantfile,*.prawn} set ft=ruby

au FileType ruby setl sw=2 sts=2 et
au FileType javascript setl sw=2 sts=2 et
au FileType yaml setl sw=2 sts=2 et

:command JsonFormat %!python -m json.tool

" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
